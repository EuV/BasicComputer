#summary Стандарт кодирования
=Стандарт кодирования=
==Заголовок файла==

{{{
/* 
   например, какое-нибудь лиц. соглашение
*/
//  file_name.cpp - <пара слов о том, что этот файл делает>
}}}

==Табуляция==

{{{
Tab0
    Tab1 
        Tab2
}}}

Используется символ табуляции. Отступ выставляется равным 4 пробелам.

==Именование классов, функций и переменных==
===Классы===

{{{
class EMegaClass {
                EMegaClass     ( void );
               ~EMegaClass     ( void );
        void    SomeFoonction  ( int a, int b );
        void    SomeFoonction  ( float r, float d );
    };
}}}

    * Имя класса начинается с буквы E. Исключения - названия интерфейсов: IConsole
    * Каждое слово в названии класса пишется с большой буквы.
    * Тип возвращаемого значения, имя функции и список параметров должны быть выравнены по вертикали. Данное правило можно нарушать для очень длинных названий функций и типов.
    * между скобками и параметрами ставится один пробел. 

===Функции===

Если функция не является методом класса, то в ее названии должно присутствовать сокращенное название подсистемы, к которой она принадлежит. Название подсистемы и название самой функции должно отделяться символом подчеркивания:

{{{
float Math_FindIntersection(EVec4 a, EVec4 b)
void Lib_Assert(...)
}}}

Если функция является методом класса, то каждое слово в названии функции пишется с большой буквы:

`void SetViewPort(int w, int h)`

===Переменные===

В названии переменных каждое слово пишется с маленькой буквы, и разделяются знаком подчеркивания:

{{{
int mode;
float radius_scale;
HWND  main_window_handle;
}}}

==Комментарии==
===Комментарии-разделители===

{{{
/*-----------------------------------------------------------------------------
    - какой-нибудь текст
-----------------------------------------------------------------------------*/
}}}

===Комментарии к функциям===

{{{
//
//  EKlass::Foonction()
//
void EKlass::Foonction(void)
{
}
}}}

==="Отключение" участков кода посредством комментариев===

{{{
//memset(&wc, 0, sizeof(wc));
//      wc.cbClsExtra           =       0;
//      wc.cbSize               = sizeof (WNDCLASSEX);
//      wc.lpfnWndProc          = ConWndProc;   
//      wc.style                = CS_HREDRAW | CS_VREDRAW | CS_OWNDC;
//      wc.hInstance            = hInst;
//      wc.hbrBackground        = (HBRUSH)CreateSolidBrush(SYSCON_WINDOWCOLOR);
//      wc.hCursor              = LoadCursor(NULL, IDC_ARROW);
//      wc.lpszClassName        = CONSOLE_CLASSNAME;
}}}

Такой способ предпочтительнее /*...*/, т.к. при сравнение версий заметно, что закомментированы все строчки. В NetBeans есть горячие клавиши: Ctrl+/ - закомментировать /раскоментировать блок.

_По образу и подобию статьи проекта [http://code.google.com/p/eclipse-game/ Eclipse]_