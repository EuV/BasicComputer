#summary Эмулятор БЭВМ для командной строки

= Эмулятор БЭВМ для командной строки =

<wiki:toc max_depth="1"/>

= Способы запуска =

 # Скачать [http://helios.cs.ifmo.ru/bcomp/bcomp.jar JAR-архив] и запустить эмулятор командой:
{{{
java -jar -Dmode=cli bcomp.jar
}}}
 # Для unix-подобных систем дополнительно скачать [http://helios.cs.ifmo.ru/bcomp/bcomp shell скрипт] и запустить его командой:
{{{
bcomp -c
}}}
 # Для ОС семейства Windows дополнительно скачать [http://helios.cs.ifmo.ru/bcomp/cli.bat bat скрипт] и запустить его командой:
{{{
cli
}}}
 # Зайти на один из серверов кафедры ВТ helios/aqua/terra и выполнить команду:
{{{
bcomp -c
}}}

= Список команд =
|| *Команда* || *Можно сократить до* || *Описание* || *Комментарий* ||
|| help || h || Вывости подсказку по командам || ||
|| address _value_ || a || Пультовая операция "Ввод адреса" || ||
|| write _value ..._ || w || Пультовая операция "Запись" || Можно указать несколько значений ||
|| read _`[`count`]`_ || r || Пультовая операция "Чтение" || Читает одну или `count` ячеек ||
|| start || s || Пультовая операция "Пуск" || ||
|| continue _`[`count`]`_ || c || Пультовая операция "Продолжить" || Выполняет 1 или `count` тактов/команд/программ ||
|| run || ru || Переключение режима Работа/Останов || ||
|| clock || cl || Переключение режима потактового выполнения || ||
|| maddress _value_ || m || Записать value в СчМК || ||
|| mwrite _value ..._ || mw || Записать указанные значения в память микрокоманд || ||
|| mread _value_ || mr || Прочитать одну или `count` микрокоманд || ||
|| io _`[`addr `[`value`]``]`_ || i || Вывод состояния всех ВУ/указанного ВУ/запись `value` в ВУ || ||
|| flag _addr_ || f || Установить флаг готовности указанного ВУ || ||
|| asm || as || Ввести программу на [asm ассемблере] || ||

= Возможности эмулятора =
 # Автоматическая генерация таблиц трассировки для программ и микропрограмм в точном соответствии с требованиями методички.
 # Возможность работы с перенаправлением ввода для автоматического выполнения заготовленного сценария работы.
 # Возможность декомпиляции используемой микропрограммы с помощью команды:
{{{
java -jar -Dmode=decoder bcomp.jar
}}}

= Микропрограммы =
 # [BaseMicroProgram Исходная микропрограмма] используется по умолчанию.
 # [OptimizedMicroProgram Оптимизированная микропрограмма] используется при указании ключа `-Dmp=optimized`.
 # [ExtendedMicroProgram Расширенная микропрограмма] используется при указании ключа `-Dmp=extended`.

= Ограничения =
 # Все вводимые числа воспринимаются в шестнадцатиричной системе счисления.
 # Так как пультовые операции Ввод адреса/Запись/Чтение представляют собой микропрограммы, при работе в потактовом режиме они останавливают своё выполнение после первом микрокоманды. Для полного выполнения пультовой операции необходимо выключать потактовый режим или выполнять все такты микропрограммы вручную командой `continue`.
 # При отключенном потактовом режиме состояние регистров выводится только после достижения микрокоманды, останавливающей БЭВМ. Для получения таблицы трассировки программу необходимо выполнять в режиме останов.
 # Для пультовых операций Ввод адреса/Запись/Чтение формируются строки состояния всех регистров после выполнения этих операций.
 # Не предусмотрена реакция на пультовые команды после запуска до момента останова программы.
 # Обработка ошибок ввода находится в зачаточном состоянии и весьма ограничена. 
 # При зацикливании БЭВМ оставливает выполнение программы после выполнения 4194304 тактов подряд. При необходимости можно безопасно продолжить выполнение программы командой `continue`. Эту особенность можно использовать при выполнении ЛР6.

= Примеры использования =
 # Сгенерировать таблицу трассировки для первой ЛР
{{{
a 18
w F200 4021 1022 3024 F200 4023 4024 3024 F000 DEAD BEEF ACDC
a 18
s
c 9
}}}
 # Сгенерировать таблицу трассировки для команды 7XXX: ОП(XXX) -> А, 1 -> C
{{{
ma b0
mw 0100 40f5 8388
a 10
w 7010
a 10
s
clock
c 15
}}}
 # Выполнить [http://helios.cs.ifmo.ru/bcomp/test.txt подготовленный сценарий]
{{{
/home/dima/java/bcomp/bcomp < /home/dima/java/bcomp/test
}}}
 # В цикле увеличивать содержимое А на 1 и 6 раз каждую секунду записывать в ячейки памяти накопленное значение
{{{
a e
w -6 20 f200 e000 f800 e300 f800 e100 c014 380f e000 000e c014 f000
a 10
ru
s
}}}
 # Используя [asm ассемблер] ввести программу, складывающую два числа
{{{
asm
ORG 10
BEGIN:	CLA
	ADD X
	ADD Y
	MOV R
	HLT

X:	WORD	?
Y:	WORD	?
R:	WORD	?
END
}}}
